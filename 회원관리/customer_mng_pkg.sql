
-- 고객 테이블 생성
create table cust (
    custid varchar2(20) not null, -- 고객 고유 ID
    id varchar2(20) not null, -- 고객 ID
    pwd varchar2(20) not null, -- 비밀번호
    name varchar2(20) not null, -- 이름
    zipcode varchar2(7), -- 우편번호
    mobile_no varchar2(14), -- 휴대폰 번호
    email varchar2(30), -- 이메일
    birth_date date, -- 생일
    constraint pk_cust primary key (custid) -- 기본 키 제약 조건
);

-- 쿠폰 테이블 생성
create table coupons (
    coupon_id number generated by default as identity primary key, -- 쿠폰 고유 ID
    custid varchar2(20), -- 고객 ID
    coupon_code varchar2(20), -- 쿠폰 코드
    discount_amount number, -- 할인 금액
    issue_date date -- 발행 일자
);

-- 이전 고객 테이블 생성 (삭제된 고객 정보 백업용)
create table old_customer (
    custid varchar2(20), -- 고객 고유 ID
    id varchar2(20), -- 고객 ID
    pwd varchar2(20), -- 비밀번호
    name varchar2(20), -- 이름
    zipcode varchar2(7), -- 우편번호
    mobile_no varchar2(14), -- 휴대폰 번호
    email varchar2(30), -- 이메일
    birth_date varchar2(15), -- 생일
    deleted_date date -- 삭제 일자
);

-- 고객 삭제 시 백업 트리거 생성
create or replace trigger trg_backup_customer
before delete on cust
for each row
begin
    --삭제되는 고객의 데이터를 백업
    --삭제되는 행의 custid, id, pwd 등의 값을 참조하여 old_customer 테이블에 삽입
    --sysdate는 현재 시스템의 날짜와 시간을 delete_date로 삽입. 즉 삭제된 날짜를 기록합니다.
    insert into old_customer (custid, id, pwd, name, zipcode, mobile_no, email, deleted_date, birth_date)
    values (:old.custid, :old.id, :old.pwd, :old.name, :old.zipcode, :old.mobile_no, :old.email, sysdate, :old.birth_date);
    --commit; 
    --트랜잭션 제어는 트리거를 호출한 sql문이나 프로시저에서 수행
exception
    when others then
        --rollback; 
        -- rollback을 사용하지 않는 이유: 트리거에서 rollback을 사용하면 모든 작업이 취소됨.
        -- 트리거는 트랜잭션의 일부로 동작하므로 트리거가 호출된 시점의 트랜잭션을 전부 롤백하게 됨.
        -- 따라서, 트리거 내에서 rollback을 사용하는 것은 적절하지 않음.
        -- 예외 발생 시 write_log 프로시저를 호출하여 로그 기록
        write_log('trg_backup_customer', sqlerrm, 'old_customer 테이블 삽입 중 오류 발생');
        -- 예외를 다시 발생시킴
        raise;
end;
/

-- 고객 고유 ID 시퀀스 생성
create sequence seq_cust
start with 1
maxvalue 99999
minvalue 1
nocycle
cache 10
order;

-- 예외 로그 테이블 생성
create table exception_log (
    log_date varchar2(8) default to_char(sysdate, 'yyyymmdd'), -- 로그 기록 일자 yyyymmdd
    log_time varchar2(6) default to_char(sysdate, 'hh24miss'), -- 로그 기록 시간 hh24miss
    program_name varchar2(100), -- exception 발생 프로그램
    error_message varchar2(250), -- exception message
    description varchar2(250) -- 비고 사항
);

-- 이 과정으로 utl_file 패키지를 사용할 수 있음 --

-- 디렉터리 객체 생성 (DBA 권한 필요)
-- create or replace directory dir as 'C:\Users\wldnj\Desktop\temp';
-- select * from all_directories;
-- 디렉터리 객체에 대한 읽기/쓰기 권한 부여 (DBA 권한 필요)
-- grant read, write on directory dir to Da2411;
-- 'utl_file_dir' 매개변수 설정

-- 로그 기록 프로시저
create or replace procedure 
write_log(a_program_name in varchar2, a_error_message in varchar2, a_description in varchar2)
as
    v_file utl_file.file_type;
begin
    -- exception을 log 테이블에 기록
    insert into exception_log(program_name, error_message, description)
        values(a_program_name, a_error_message, a_description);
    commit;
exception
    when others then
        rollback;
        -- utl_file을 사용하여 파일에 기록
        -- dir 디렉토리의 error_log.txt 파일을 추가 모드('a')로 열기
        v_file := utl_file.fopen('dir', 'error_log.txt', 'a');
        -- 에러 메시지, 발생 프로그램, 비고 사항을 파일에 기록
        utl_file.put_line(v_file, 'error while logging: ' || sqlerrm);
        utl_file.put_line(v_file, 'error program: ' || a_program_name);
        utl_file.put_line(v_file, 'description: ' || a_description); -- 비고
        utl_file.fclose(v_file); --파일 닫기
end;
/

-- utl_file 패키지 사용 이유
-- 예외 발생 시 로그를 기록할 수 있는 또 다른 방법이 필요
-- pl/sql 코드에서 파일을 읽거나 쓸 수 있음.
-- 로그 테이블에 로그를 기록할 때 오류 발생 시, 로그 파일에 기록하여 로그 보존 가능
-- 로그 파일은 로그 테이블과는 별도로 저장되므로 db의 문제로 인해 로그 테이블에 기록할 수 없는 경우에도 로그를 남길 수 있다.

-- 패키지 header 생성
create or replace package cust_mng
as
    -- id 유효성 검사
    ex_invalid_id exception;
    -- pwd 유효성 검사
    ex_invalid_pwd exception;
    -- 이메일 형식 유효성 검사
    ex_invalid_email exception;
    -- 전화번호 형식 유효성 검사
    ex_invalid_phone exception;
    -- 우편번호 형식 유효성 검사
    ex_invalid_zipcode exception;
    -- 생일 형식 예외
    ex_invalid_birthdate exception;
    
    --id가 존재하지 않는 경우 예외
    ex_id_not_found exception;
    -- 오늘 생일자가 없을 경우 예외
    ex_no_hbd_members exception;
    -- id 중복 처리 사용자 정의 예외
    ex_dup_id exception;
    
    -- 필수값 누락 검사
    ex_missing_field exception;

    --회원 가입 로직
    -- 중복된 id 가 있는지 확인하여 예외 처리
    -- 필수 필드 누락 검사
    -- 각 필드의 유효성 검사
    -- 회원 정보를 db에 추가하고 커밋
    
    -- 회원 가입
    procedure insert_cust(p_id varchar2, p_pwd varchar2,
        p_name varchar2, p_zipcode varchar2, p_mobile_no varchar2, p_email varchar2, p_birthdate varchar2);
    
    --회원 탈퇴 로직
    --회원 id로 데이터를 삭제하고, 삭제할 행이 없으면 예외 처리
    -- 삭제 성공 시 커밋
    
    -- 회원 탈퇴
    procedure delete_cust(p_id cust.id%type);
    
    --회원 정보 변경 로직
    -- 존재하는 id인지 확인
    --필수 필드와 각 필드의 유효성 검사
    --회원 정보를 변경하고 커밋
    
    -- 회원 정보 변경
    procedure update_cust(p_id cust.id%type, p_pwd varchar2,
        p_name varchar2, p_zipcode varchar2, p_mobile_no varchar2, p_email varchar2, p_birthdate varchar2);
    
    --생일 쿠폰 발급 로직
    -- 오늘 생일인 회원을 조회
    --조회된 회원들에게 쿠폰을 발급
    --발급된 쿠폰을 db에 삽입, 커밋
    --오늘 생일인 회원이 없는 경우 예외 처리
    
    -- (비즈니스 로직 삽입) 생일인 회원에게 할인 쿠폰 발급
    procedure grant_birthday_coupon;
    -- 비밀번호 유효성 검사
    function validate_password(p_pwd varchar2) return varchar2;
end cust_mng;
/

desc cust_mng;

-- 패키지 body 생성
create or replace package body cust_mng
as
    -- 회원 가입 프로시저
    procedure insert_cust(p_id varchar2, p_pwd varchar2,
        p_name varchar2, p_zipcode varchar2, p_mobile_no varchar2, p_email varchar2, p_birthdate varchar2)
    is
        v_count number;
        v_password_check varchar2(100);
    begin
        -- id 중복 체크
        select count(*) into v_count from cust where id = p_id;
        if v_count > 0 then
            raise ex_dup_id; -- 중복된 id 예외 발생
        end if;
        
        -- 필수 필드 누락 검사
        if p_id is null or p_pwd is null or p_name is null then
            raise ex_missing_field; -- 필수 필드 누락 예외 발생
        end if;
        
        -- 필드 값 유효성 검사
        --각 필드의 유효성 검사 수행, 유효하지 않은 경우 에외 발생
        -- id 유효성 검사: 영문자와 숫자로 구성된 5~20자의 문자열
        if not regexp_like(p_id, '^[a-zA-Z0-9]{5,20}$') then
            raise ex_invalid_id; -- 유효하지 않은 id 예외 발생
        end if;
        
        -- 비밀번호 유효성 검사: 하나 이상의 대문자, 소문자, 숫자, 특수문자 포함, 8~20자의 문자열
        v_password_check := validate_password(p_pwd);
        if v_password_check is not null then
            raise ex_invalid_pwd; --유효하지 않은 비밀번호 예외 발생
        end if;

        -- email 유효성 검사
        if not regexp_like(p_email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$') then
            raise ex_invalid_email; -- 유효하지 않은 이메일 예외 발생
        end if;
        
        -- 전화번호 유효성 검사
        if not regexp_like(p_mobile_no, '^\d{2,3}-\d{3,4}-\d{4}$') then
            raise ex_invalid_phone; -- 유효하지 않은 전화번호 예외 발생
        end if;
        
        -- 우편번호 유효성 검사
        if not regexp_like(p_zipcode, '^\d{3}-\d{3}$') then
            raise ex_invalid_zipcode; -- 유효하지 않은 우편번호 예외 발생
        end if;
        
        -- 생일 유효성 검사
        if not regexp_like(p_birthdate, '^\d{2}/\d{2}/\d{2}$') then
            raise ex_invalid_birthdate; -- 유효하지 않은 생일 형식 예외 발생
        end if;
        
        -- 생일이 sysdate(현재)보다 큰지 검사
        declare
            v_birthdate date;
        begin
            v_birthdate := to_date(p_birthdate, 'yy/mm/dd');
            if v_birthdate > sysdate then
                raise ex_invalid_birthdate; -- 생일이 현재 날짜보다 큰 경우 예외 발생
            end if;
        exception
            when others then
                raise ex_invalid_birthdate; -- 다른 예외 발생 시 생일 형식 예외 발생
        end;
        
        insert into cust(custid, id, pwd, name, zipcode, mobile_no, email, birth_date)
        values(seq_cust.nextval, p_id, p_pwd, p_name, p_zipcode, p_mobile_no, p_email, p_birthdate);
        commit; -- 추가가 성공하면 커밋하여 트랜잭션 완료
    exception
        --예외가 발생하면 롤백하여 트랜잭션 전의 상태로
        when ex_missing_field then
            rollback;
            write_log('insert', '필수 필드 누락', '필수 필드가 누락되었습니다.');
            -- 내장 프로시저. 에러코드와 에러 메시지를 사용자에게 표시해줌. 디버그와 오류 처리에 용이
            raise_application_error(-20004, '필수 필드가 누락되었습니다.');
        when ex_dup_id then
            rollback;
            write_log('insert', '중복 id: ' || p_id, '이미 존재하는 id입니다.');
            raise_application_error(-20001, '이미 존재하는 id입니다.' || p_id);
        when ex_invalid_id then
            rollback;
            write_log('insert', 'invalid id: ' || p_id, 'id 유효성: 영문자와 숫자로 구성된 5-20자의 문자열');
            raise_application_error(-20002, '유효하지 않은 id: 영문자와 숫자로 구성된 5-20자의 문자열 포함되어야 합니다.' || p_id);
        when ex_invalid_pwd then
            rollback;
            write_log('insert', 'invalid password: ' || p_pwd, '비밀번호 유효성: 8~20자의 문자열, 하나 이상의 대문자, 소문자, 숫자, 특수문자 포함되어야 합니다.');
            raise_application_error(-20003, '유효하지 않은 비밀번호: 8~20자의 문자열, 하나 이상의 대문자, 소문자, 숫자, 특수문자 포함되어야 합니다.' || p_pwd);
        when ex_invalid_email then
            rollback;
            write_log('insert', 'invalid email: ' || p_email, 'invalid email format.');
            raise_application_error(-20005, 'invalid email');
        when ex_invalid_phone then
            rollback;
            write_log('insert', 'invalid phone: ' || p_mobile_no, 'invalid phone number format.');
            raise_application_error(-20006, 'invalid phone');
        when ex_invalid_zipcode then
            rollback;
            write_log('insert', 'invalid zipcode: ' || p_zipcode, 'invalid zipcode format.');
            raise_application_error(-20007, 'invalid zipcode');
        when ex_invalid_birthdate then
            rollback;
            write_log('insert', 'invalid birthdate: ' || p_birthdate, '생일 형식은 yy/mm/dd이어야 하며, 현재 날짜보다 이전이어야 합니다.');
            raise_application_error(-20008, '유효하지 않은 생일입니다. 생일 형식은 yy/mm/dd이어야 하며, 현재 날짜보다 이전이어야 합니다.' || p_birthdate);
        when others then
            rollback;
            write_log('insert', sqlerrm, 'error inserting customer');
            raise;
    end insert_cust;

    -- 비밀번호 유효성 검사 함수
    function validate_password(p_pwd varchar2) return varchar2 is
    begin
        -- 길이 검사
        if length(p_pwd) < 8 or length(p_pwd) > 20 then
            return 'invalid';
        end if;
        -- 소문자 포함 여부 검사
        if not regexp_like(p_pwd, '.*[a-z].*') then
            return 'invalid';
        end if;
        -- 대문자 포함 여부 검사
        if not regexp_like(p_pwd, '.*[A-Z].*') then
            return 'invalid';
        end if;
        -- 숫자 포함 여부 검사
        if not regexp_like(p_pwd, '.*\d.*') then
            return 'invalid';
        end if;
        -- 특수문자 포함 여부 검사
        if not regexp_like(p_pwd, '.*[@$!%*?&].*') then
            return 'invalid';
        end if;

        return null; -- 유효한 경우 null 반환
    end validate_password;
    
    -- 회원 탈퇴 프로시저
    procedure delete_cust(p_id cust.id%type) is
    begin
        delete from cust where id = p_id;
        
        --삭제된 행이 없는 경우 예외 발생
        if sql%rowcount = 0 then
            raise ex_id_not_found; -- 해당 id가 존재하지 않는 경우 예외 발생
        end if;
        commit;
    exception
        when ex_id_not_found then
            rollback;
            write_log('delete', 'id not found: ' || p_id, 'id에 해당하는 데이터가 없습니다');
            raise_application_error(-20009, '해당 id는 존재하지 않습니다: ' || p_id);
        when others then
            rollback;
            write_log('delete', sqlerrm, '회원 탈퇴 중 오류 발생 id: ' || p_id);
            raise;
    end delete_cust;

    -- 회원 정보 변경 프로시저
    procedure update_cust(p_id cust.id%type, p_pwd varchar2,
            p_name varchar2, p_zipcode varchar2, p_mobile_no varchar2, p_email varchar2, p_birthdate varchar2)
    is
        v_count number;
        v_password_check varchar2(100);
    begin
        -- id 존재 여부 확인
        select count(*) into v_count from cust where id = p_id;
        if v_count = 0 then
            raise ex_id_not_found; -- 해당 id가 존재하지 않는 경우 예외 발생
        end if;
        
        -- 필수 필드 누락 검사
        if p_id is null or p_pwd is null or p_name is null then
            raise ex_missing_field; -- 필수 필드 누락 예외 발생
        end if;
        
        -- 필드 값 유효성 검사
        -- 비밀번호 유효성 검사: 하나 이상의 대문자, 소문자, 숫자, 특수문자 포함, 8~20자의 문자열
        v_password_check := validate_password(p_pwd);
        if v_password_check is not null then
           raise ex_invalid_pwd; --유효하지 않은 pwd 예외 발생
        end if;

        -- email 유효성 검사
        if not regexp_like(p_email, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$') then
            raise ex_invalid_email; -- 유효하지 않은 이메일 예외 발생
        end if;
        
        -- 전화번호 유효성 검사
        if not regexp_like(p_mobile_no, '^\d{2,3}-\d{3,4}-\d{4}$') then
            raise ex_invalid_phone; -- 유효하지 않은 전화번호 예외 발생
        end if;
        
        -- 우편번호 유효성 검사
        if not regexp_like(p_zipcode, '^\d{3}-\d{3}$') then
            raise ex_invalid_zipcode; -- 유효하지 않은 우편번호 예외 발생
        end if;
        
        -- 생일 유효성 검사
        if not regexp_like(p_birthdate, '^\d{2}/\d{2}/\d{2}$') then
            raise ex_invalid_birthdate; -- 유효하지 않은 생일 형식 예외 발생
        end if;
        
        -- 생일이 sysdate보다 큰지 검사
        declare
            v_birthdate date;
        begin
            v_birthdate := to_date(p_birthdate, 'yy/mm/dd');
            if v_birthdate > sysdate then
                raise ex_invalid_birthdate; -- 생일이 현재 날짜보다 큰 경우 예외 발생
            end if;
        exception
            when others then
                raise ex_invalid_birthdate; -- 다른 예외 발생 시 생일 형식 예외 발생
        end;
        
        update cust set 
            pwd = p_pwd,
            name = p_name,
            zipcode = p_zipcode,
            mobile_no = p_mobile_no,
            email = p_email,
            birth_date = p_birthdate
        where id = p_id;
        commit; -- 변경 사항 커밋
    exception
        when ex_missing_field then
            rollback;
            write_log('update', '필수 필드 누락', '필수 필드가 누락되었습니다.');
            raise_application_error(-20004, '필수 필드가 누락되었습니다.');
        when ex_invalid_id then
            rollback;
            write_log('update', 'invalid id: ' || p_id, 'id 유효성: 영문자와 숫자로 구성된 5-20자의 문자열');
            raise_application_error(-20002, '유효하지 않은 id: 영문자와 숫자로 구성된 5-20자의 문자열 포함되어야 합니다.' || p_id);
        when ex_invalid_pwd then
            rollback;
            write_log('insert', 'invalid password: ' || p_pwd, '비밀번호 유효성: 8~20자의 문자열, 하나 이상의 대문자, 소문자, 숫자, 특수문자 포함되어야 합니다.');
            raise_application_error(-20003, '유효하지 않은 비밀번호: 8~20자의 문자열, 하나 이상의 대문자, 소문자, 숫자, 특수문자 포함되어야 합니다.' || p_pwd);
        when ex_invalid_email then
            rollback;
            write_log('update', 'invalid email: ' || p_email, 'invalid email format.');
            raise_application_error(-20005, 'invalid email');
        when ex_invalid_phone then
            rollback;
            write_log('update', 'invalid phone: ' || p_mobile_no, 'invalid phone number format.');
            raise_application_error(-20006, 'invalid phone');
        when ex_invalid_zipcode then
            rollback;
            write_log('update', 'invalid zipcode: ' || p_zipcode, 'invalid zipcode format.');
            raise_application_error(-20007, 'invalid zipcode');
        when ex_invalid_birthdate then
            rollback;
            write_log('update', 'invalid birthdate: ' || p_birthdate, '생일 형식은 yy/mm/dd이어야 하며, 현재 날짜보다 이전이어야 합니다.');
            raise_application_error(-20008, '유효하지 않은 생일입니다. 생일 형식은 yy/mm/dd이어야 하며, 현재 날짜보다 이전이어야 합니다.' || p_birthdate);
        when ex_id_not_found then
            rollback;
            write_log('update', 'id not found: ' || p_id, '해당 id는 존재하지 않습니다.');
            raise_application_error(-20009, '해당 id는 존재하지 않습니다: ' || p_id);
        when others then
            rollback;
            write_log('update', sqlerrm, 'error updating customer');
            raise;
    end update_cust;

    -- 생일인 회원에게 할인 쿠폰 발급 프로시저
    procedure grant_birthday_coupon is
        --커서 선언: 오늘 생일인 회원을 조회
        cursor member_cur is
            select custid, id, name, email from cust
            where to_char(birth_date, 'mmdd') = to_char(sysdate, 'mmdd');
        
        v_custid cust.custid%type;
        v_id cust.id%type;
        v_name cust.name%type;
        v_email cust.email%type;
        v_member_count number := 0; --오늘 생일인 회원 수를 세기 위한 변수 선언
    begin
        -- 커서 오픈: 오늘 생일인 회원 목록을 가져옴
        open member_cur;
        loop
            --커서에서 데이터를 가져와 변수에 저장
            fetch member_cur into v_custid, v_id, v_name, v_email;
            exit when member_cur%notfound; --더이상 데이터가 없다면 루프 종료
            
            -- 루프 내에서 회원 수 세기
            v_member_count := v_member_count + 1;
            
            -- 할인 쿠폰 발급 로직
            -- 각 회원에게 생일 쿠폰을 발급
            insert into coupons (custid, coupon_code, discount_amount, issue_date)
            values (v_custid, 'bdaycode', 20, sysdate);
            
        end loop;
        close member_cur; -- 커서 닫기
        
        -- 오늘 생일자가 0일 경우 예외 발생
        if v_member_count = 0 then
            raise ex_no_hbd_members;
        end if;
        
        commit; --모든 쿠폰 발급이 성공하면 커밋
    exception
        when ex_no_hbd_members then
            rollback;
            write_log('grant_birthday_coupon', 'none today', '오늘 생일인 회원이 존재하지 않습니다.');
            raise_application_error(-20010, '오늘 생일인 회원이 존재하지 않습니다.');
        when others then
            rollback;
            write_log('grant_birthday_coupon', sqlerrm, '생일 쿠폰 발급 중 오류 발생');
            raise;
    end grant_birthday_coupon;
end cust_mng;
/

select * from cust;
select * from exception_log;

-- 회원 정보 추가 테스트
begin
    cust_mng.insert_cust(
        p_id => 'helloworld',
        p_pwd => '!passwordPP',
        p_name => '송지원',
        p_zipcode => '123-123',
        p_mobile_no => '010-5678-5678',
        p_email => 'chulsoo@example.com',
        p_birthdate => '24/05/25'
    );
end;
/

select * from cust;
select * from exception_log;

-- 회원 정보 변경 테스트
begin
    cust_mng.update_cust(
        p_id => 'helloworld',
        p_pwd => 'thdngS12!',
        p_name => '김철수',
        p_zipcode => '123-123',
        p_mobile_no => '010-5678-5678',
        p_email => 'update@example.com',
        p_birthdate => '22/05/22'
    );
end;
/

select * from cust;
select * from exception_log;

-- 회원 탈퇴 테스트
begin
    cust_mng.delete_cust('helloworld');
end;
/

select * from cust;
select * from exception_log;
select * from old_customer;

-- 생일 쿠폰 발급 테스트
begin
    cust_mng.grant_birthday_coupon;
end;
/

select * from cust;
select * from exception_log;
select * from coupons;


-- 테이블 및 트리거, 시퀀스 제거
-- 트리거 제거
drop trigger trg_backup_customer;

-- 패키지 제거
drop package cust_mng;

-- 테이블 제거
drop table cust;
drop table old_customer;
drop table coupons;
drop table exception_log;

-- 시퀀스 제거
drop sequence seq_cust;

-- 프로시저 제거
drop procedure write_log;